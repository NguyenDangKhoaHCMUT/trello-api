import { userModel } from '~/models/userModel'
import { BrevoProvider } from '~/providers/BrevoProvider'

import ApiError from '~/utils/ApiError'
import { StatusCodes } from 'http-status-codes'

import bcryptjs from 'bcryptjs'
import { v4 as uuidv4 } from 'uuid'

import { pickUser } from '~/utils/formater'

import { WEBSITE_DOMAIN } from '~/utils/constants'

import { env } from '~/config/environment'
import { JwtProvider } from '~/providers/JwtProvider'
import { CloudinaryProvider } from '~/providers/CloudinaryProvider'

const createNew = async (reqBody) => {
  try {
    // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng c·ªßa ch√∫ng ta hay ch∆∞a
    const existUser = await userModel.findOneByEmail(reqBody.email)
    if (existUser) {
      throw new ApiError(StatusCodes.CONFLICT, 'Email already exist!')
    }

    // T·∫°o data ƒë·ªÉ l∆∞u v√†o database
    const nameFromEmail = reqBody.email.split('@')[0]
    const newUser = {
      email: reqBody.email,
      password: bcryptjs.hashSync(reqBody.password, 8), // Tham s·ªë th·ª© 2 gi√° tr·ªã c√†ng cao th√¨ bƒÉm mk c√†ng l√¢u
      username: nameFromEmail,
      displayName: nameFromEmail, // M·∫∑c ƒë·ªãnh ƒë·ªÉ gi·ªëng username khi ng∆∞·ªùi d√πng ƒëki m·ªõi, v·ªÅ sau l√†m th√™m t√≠nh nƒÉng update cho user
      verifyToken: uuidv4()
    }

    // Th·ª±c hi·ªán l∆∞u th√¥ng tin user v√†o database
    // G·ªçi t·ªõi Model ƒë·ªÉ l∆∞u d·ªØ li·ªáu b·∫£n ghi newUser v√†o Database
    const createdUser = await userModel.createNew(newUser)

    // L·∫•y b·∫£n ghi Board sau khi g·ªçi (t√πy m·ª•c ƒë√≠ch d·ª± √°n m√† c√≥ c·∫ßn b∆∞·ªõc n√†y hay kh√¥ng)
    const getNewUser = await userModel.findOneById(createdUser.insertedId)

    // g·ª≠i email cho ng∆∞·ªùi d√πng x√°c th·ª±c t√†i kho·∫£n
    const verificationLink = `${WEBSITE_DOMAIN}/account/verification?email=${getNewUser.email}&token=${getNewUser.verifyToken}`
    const customSubject =
      'Trello: Please verify your email before using our services!'
    const htmlContent = `
      <h3> Here is your vertification link:</h3>
      <h3> ${verificationLink}</h3>
      <h3> Sincerely,</h3>
      <h3><strong> Nguyen Dang Khoa.</strong></h3>
    `

    // G·ªçi t·ªõi Provider g·ª≠i email
    await BrevoProvider.sendEmail(getNewUser.email, customSubject, htmlContent)

    // tr·∫£ v·ªÅ d·ªØ li·ªáu cho ph√≠a controller
    return pickUser(getNewUser)
  } catch (error) {
    throw error
  }
}

const verifyAccount = async (reqBody) => {
  try {
    // Query user trong dbs
    const existUser = await userModel.findOneByEmail(reqBody.email)

    // C√°c b∆∞·ªõc ki·ªÉm tra c·∫ßn thi·∫øt
    if (!existUser)
      throw new ApiError(StatusCodes.NOT_FOUND, 'Account not found!')
    if (existUser.isActive)
      throw new ApiError(
        StatusCodes.NOT_ACCEPTABLE,
        'Account has been activated!'
      )
    if (reqBody.token !== existUser.verifyToken)
      throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Token is invalid!')

    // N·∫øu m·ªçi th·ª© ƒë·ªÅu oke, ti·∫øn h√†nh update l·∫°i th√¥ng tin c·ªßa user ƒë·ªÉ verify account
    const updateData = {
      isActive: true,
      verifyToken: null
    }

    const updatedUser = await userModel.update(existUser._id, updateData)

    // tr·∫£ v·ªÅ d·ªØ li·ªáu cho ph√≠a controller
    return pickUser(updatedUser)
  } catch (error) {
    throw error
  }
}

const login = async (reqBody) => {
  try {
    // Query user trong dbs
    const existUser = await userModel.findOneByEmail(reqBody.email)

    // C√°c b∆∞·ªõc ki·ªÉm tra c·∫ßn thi·∫øt
    if (!existUser)
      throw new ApiError(StatusCodes.NOT_FOUND, 'Account not found!')
    if (!existUser.isActive)
      throw new ApiError(
        StatusCodes.NOT_ACCEPTABLE,
        'Account has not been activated! Check the email and verify before login!'
      )
    if (!bcryptjs.compareSync(reqBody.password, existUser.password)) {
      throw new ApiError(
        StatusCodes.NOT_ACCEPTABLE,
        'Your Email or Password is incorrect!'
      )
    }

    // N·∫øu m·ªçi th·ª© ƒë·ªÅu oke, ti·∫øn h√†nh t·∫°o token ƒëƒÉng nh·∫≠p ƒë·ªÉ tr·∫£ v·ªÅ cho FE
    // T·∫°o th√¥ng tin ƒë·ªÉ ƒë√≠nh k√®m trong JWT bao g·ªìm _id v√† email c·ªßa user
    const userInfo = {
      _id: existUser._id,
      email: existUser.email
    }

    // T·∫°o ra 2 lo·∫°i token, accessToken v√† refreshToken ƒë·ªÉ tr·∫£ v·ªÅ cho FE
    const accessToken = await JwtProvider.generateToken(
      userInfo,
      env.ACCESS_TOKEN_SECRET_SIGNATURE,
      env.ACCESS_TOKEN_LIFE
      // 5
    )
    const refreshToken = await JwtProvider.generateToken(
      userInfo,
      env.REFRESH_TOKEN_SECRET_SIGNATURE,
      env.REFRESH_TOKEN_LIFE
      // 15
    )

    // Tr·∫£ v·ªÅ th√¥ng tin c·ªßa user k√®m theo 2 c√°i token v·ª´a t·∫°o ra
    return { accessToken, refreshToken, ...pickUser(existUser) }
  } catch (error) {
    throw error
  }
}

const refreshToken = async (clientRefreshToken) => {
  try {
    // Verify/gi·∫£i m√£ c√°i refresh token xem c√≥ h·ª£p l·ªá kh√¥ng
    const refreshTokenDecoded = await JwtProvider.verifyToken(
      clientRefreshToken,
      env.REFRESH_TOKEN_SECRET_SIGNATURE
    )
    // console.log('üöÄ ~ refreshToken ~ refreshTokenDecoded:', refreshTokenDecoded)

    // ƒêo·∫°n n√†y v√¨ ch√∫ng ta ch·ªâ l∆∞u nh·ªØng th√¥ng tin unique v√† c·ªë ƒë·ªãnh c·ªßa user trong token r·ªìi, v√¨ v·∫≠y c√≥ th·ªÉ l·∫•y lu√¥n t·ª´ decoded ra,
    // ti·∫øt ki·ªám query v√†o DB ƒë·ªÉ l·∫•y data m·ªõi
    const userInfo = {
      _id: refreshTokenDecoded._id,
      email: refreshTokenDecoded.email
    }

    // T·∫°o acccessToken m·ªõi
    const accessToken = await JwtProvider.generateToken(
      userInfo,
      env.ACCESS_TOKEN_SECRET_SIGNATURE,
      env.ACCESS_TOKEN_LIFE
      // 5
    )

    return { accessToken }
  } catch (error) {
    throw error
  }
}

const update = async (userId, reqBody, userAvatarFile) => {
  try {
    // Query user v√† ki·ªÉm tra cho ch·∫Øc ch·∫Øn
    const existUser = await userModel.findOneById(userId)
    if (!existUser) {
      throw new ApiError(StatusCodes.NOT_FOUND, 'Account not found!')
    }
    if (!existUser.isActive) {
      throw new ApiError(
        StatusCodes.NOT_ACCEPTABLE,
        'Account has not been activated! Check the email and verify before login!'
      )
    }

    // Kh·ªüi t·∫°o k·∫øt qu·∫£ updated user ban ƒë·∫ßu l√† empty
    let updatedUser = {}

    // TH change password
    if (reqBody.current_password && reqBody.new_password) {
      // Ki·ªÉm tra xem c√°i current_password c√≥ ƒë√∫ng hay kh√¥ng
      if (!bcryptjs.compareSync(reqBody.current_password, existUser.password)) {
        throw new ApiError(
          StatusCodes.NOT_ACCEPTABLE,
          'Your Current Password is incorrect!'
        )
      }
      // N·∫øu nh∆∞ current_password ƒë√∫ng th√¨ hash l·∫°i 1 c√°i mk m·ªõi v√† update l·∫°i v√†o DB
      updatedUser = await userModel.update(userId, {
        password: bcryptjs.hashSync(reqBody.current_password, 8) // Tham s·ªë th·ª© 2 gi√° tr·ªã c√†ng cao th√¨ bƒÉm mk c√†ng l√¢u
      })
    } else if (userAvatarFile) {
      // Tr∆∞·ªùng h·ª£p update file l√™n Cloud Storage, c·ª• th·ªÉ l√† Cloudinary...
      const uploadResult = await CloudinaryProvider.streamUpload(userAvatarFile.buffer, `users/${userId}`)

      // L∆∞u l·∫°i URL c·ªßa c√°i file ·∫£nh ƒë√£ ƒë∆∞·ª£c up l√™n Cloudinary v√†o database
      updatedUser = await userModel.update(userId, {
        avatar: uploadResult.secure_url
      })
    } else {
      // Tr∆∞·ªùng h·ª£p update c√°c th√¥ng tin chung, v√≠ d·ª• nh∆∞ displayName
      updatedUser = await userModel.update(userId, reqBody)
    }

    return pickUser(updatedUser)
  }
  catch (error) {
    throw error
  }
}

export const userService = {
  createNew,
  verifyAccount,
  login,
  refreshToken,
  update
}